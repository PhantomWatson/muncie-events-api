openapi: 3.0.0
servers:
  - description: Muncie Events API
    url: https://api.muncieevents.com/v1
info:
  description: |
    The API for interfacing with the [MuncieEvents.com](https://muncieevents.com) event database
  version: '1.0.0'
  title: Muncie Events API
  termsOfService: ''
  contact:
    email: admin@muncieevents.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: events
    description: ''
paths:
  /categories:
    get:
      tags:
        - categories
      summary: Get a list of all categories and the number of associated upcoming events
      operationId: getCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: Music
                            upcomingEventCount:
                              type: integer
                              example: 42
                            url:
                              type: string
                              example: "https://muncieevents.com/category/music"
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
      security:
        - api_key: []
  /contact:
    post:
      tags:
        - contact
      summary: Send a message to the Muncie Events staff
      operationId: postContact
      parameters:
        - in: header
          name: name
          schema:
            type: string
            example: Sender Name
          required: true
          description: Name of user sending message
        - in: header
          name: email
          schema:
            type: string
            example: 'sender@example.com'
          required: true
          description: Email address of sender
        - in: header
          name: body
          schema:
            type: string
            example: Message body
          required: true
          description: Body of message
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: The `name`/`email`/`body` parameter is required
      security:
        - api_key: []
  /event:
    post:
      tags:
        - events
      summary: Adds an event
      description: "Notes: Requests with multiple dates create multiple events connected by a series, but only the
        first event in that series is returned in the response. Images must be added separately. The IDs of added
        images must then be included in requests to this endpoint in order to be associated with new events."
      operationId: postEvent
      parameters:
        - name: userToken
          in: query
          description: User token (not included if user is submitting an event anonymously)
          schema:
            type: string
          example: randomStringOf32Characters
        - in: header
          name: category_id
          description: Category ID
          required: true
          schema:
            type: int
            example: 123
        - in: header
          name: title
          description: Event title
          schema:
            type: string
            example: Event Title
          required: true
        - in: header
          name: date
          description: "Array of dates for this event (format: YYYY-MM-DD)"
          required: true
          schema:
            type: array
            items:
              type: string
              example: 2020-02-20
        - in: header
          name: time_start
          description: "Starting time of event (valid formats include: 2:30pm, 02:30 PM, 14:30, etc.)"
          required: true
          schema:
            type: string
            example: "2:30pm"
        - in: header
          name: time_end
          description: Optional end time of event
          schema:
            type: string
            example: "3:30pm"
        - in: header
          name: description
          description: Full event description
          schema:
            type: string
            example: Full event description
          required: true
        - in: header
          name: location
          description: Location name
          schema:
            type: string
            example: Location name
          required: true
        - in: header
          name: location_details
          description: Location details (e.g. upstairs, Room 149, etc.)
          schema:
            type: string
            example: Location details (e.g. upstairs, Room 149, etc.)
        - in: header
          name: address
          description: Street address of event
          schema:
            type: string
            example: Street address of event
        - in: header
          name: cost
          description: Cost of event
          schema:
            type: string
            example: "$5"
        - in: header
          name: age_restriction
          description: Age restriction
          schema:
            type: string
            example: 21+
        - in: header
          name: source
          description: Description of where the user got this information
          schema:
            type: string
            example: URL of Facebook event
        - in: header
          name: images
          description: "Array of image objects, each containing `id` and optional `caption` properties, in the order the
            images should be displayed"
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: Image ID
                  example: 123
                caption:
                  type: string
                  description: Optional image caption
                  example: Image caption
        - in: header
          name: tag_ids
          description: Array of tag IDs
          schema:
            type: array
            items:
              type: int
              example: 123
        - in: header
          name: tag_names
          description: Array of new or existing tag names, or a comma-delimited string
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  example: tag name
              - type: string
                example: first tag, second tag, third tag
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
      security:
        - api_key: []
  /event/{eventId}:
    get:
      tags:
        - events
      summary: Get a specific event by its ID
      operationId: getEvent
      parameters:
        - name: eventId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          example: 123
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                              example: Missing event ID
                            detail:
                              type: string
                              example: Event ID is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                              example: Invalid event ID
                            detail:
                              type: string
                              example: Event with ID 123 not found
    patch:
      tags:
        - events
      summary: Updates an event
      operationId: patchEvent
      parameters:
        - name: userToken
          description: User token (user must be the author of the event in order to edit it)
          in: query
          required: true
          schema:
            type: string
          example: randomStringOf32Characters
        - name: eventId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          example: 123
        - in: header
          name: category_id
          description: Category ID
          schema:
            type: int
            example: 123
        - in: header
          name: title
          description: Event title
          schema:
            type: string
            example: Event Title
        - in: header
          name: date
          description: "Date format: YYYY-MM-DD"
          schema:
            type: string
            example: 2020-02-20
        - in: header
          name: time_start
          description: "Starting time of event (valid formats include: 2:30pm, 02:30 PM, 14:30, etc.)"
          schema:
            type: string
            example: "2:30pm"
        - in: header
          name: time_end
          description: Optional end time of event
          schema:
            type: string
            example: "3:30pm"
        - in: header
          name: description
          description: Full event description
          schema:
            type: string
            example: Full event description
        - in: header
          name: location
          description: Location name
          schema:
            type: string
            example: Location name
        - in: header
          name: location_details
          description: Location details (e.g. upstairs, Room 149, etc.)
          schema:
            type: string
            example: Location details (e.g. upstairs, Room 149, etc.)
        - in: header
          name: address
          description: Street address of event
          schema:
            type: string
            example: Street address of event
        - in: header
          name: cost
          description: Cost of event
          schema:
            type: string
            example: "$5"
        - in: header
          name: age_restriction
          description: Age restriction
          schema:
            type: string
            example: 21+
        - in: header
          name: source
          description: Description of where the user got this information
          schema:
            type: string
            example: URL of Facebook event
        - in: header
          name: images
          description: "Array of image objects, each containing `id` and optional `caption` properties, in the order the
            images should be displayed"
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: Image ID
                  example: 123
                caption:
                  type: string
                  description: Optional image caption
                  example: Image caption
        - in: header
          name: tag_ids
          description: Array of tag IDs
          schema:
            type: array
            items:
              type: int
              example: 123
        - in: header
          name: tag_names
          description: Array of new or existing tag names, or a comma-delimited string
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  example: tag name
              - type: string
                example: first tag, second tag, third tag
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: int
                          example: 403
                        detail:
                          type: string
                          example: "You don't have permission to edit that event"

      security:
        - api_key: []
    delete:
      tags:
        - events
      summary: Deletes an event
      operationId: deleteEvent
      parameters:
        - name: userToken
          description: User token (user must be the author of the event in order to delete it)
          in: query
          required: true
          schema:
            type: string
          example: randomStringOf32Characters
        - name: eventId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          example: 123
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: int
                          example: 403
                        detail:
                          type: string
                          example: "You don't have permission to delete that event"

      security:
        - api_key: []
  /events:
    get:
      tags:
        - events
      summary: Get events on or after the specified date/time, or in a range of dates
      operationId: getEvents
      parameters:
        - name: start
          in: query
          schema:
            type: string
            format: date
          description: 'Return events taking place on and after this date (format: YYYY-MM-DD)'
          required: true
          example: '2017-01-15'
        - name: end
          in: query
          schema:
            type: string
            format: date
          description: 'Return events up to and including this date (format: YYYY-MM-DD)'
          example: '2017-12-31'
        - name: withTags[]
          in: query
          schema:
            type: array
            items:
              type: string
          description: Return events that have any of the specified tags
          example: ['christmas', 'halloween']
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/events?on=2099-09-30&page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/events?on=2099-09-30&page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events?on=2099-09-30&page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events?on=2099-09-30&page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: The `start` parameter is required
  /events/category/{categoryId}:
    get:
      tags:
        - events
      summary: Get upcoming events in the specified category
      operationId: getEventsCategory
      parameters:
        - name: categoryId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          description: Category ID
          example: 13
        - name: withTags[]
          in: query
          schema:
            type: array
            items:
              type: string
          description: Return events that have any of the specified tags
          example: ['free concerts', 'watercolor']
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/events/category/13?page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/events/category/13?page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/category/13?page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/category/13?page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: Category ID is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: 'Category with ID {categoryId} not found'
  /events/upcoming:
    get:
      tags:
        - events
      summary: Get events on or after the current date/time
      description: 'A convenience endpoint equivalent to using /events?start={today}'
      operationId: getEventsUpcoming
      parameters:
        - name: withTags[]
          in: query
          schema:
            type: array
            items:
              type: string
          description: Return events that have any of the specified tags
          example: ['christmas', 'halloween']
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/events/upcoming?page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/events/upcoming?page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/upcoming?page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/upcoming?page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /events/search:
    get:
      tags:
        - events
      summary: Get upcoming events whose titles, descriptions, locations, or tags match the provided search term
      operationId: getEventsSearch
      parameters:
        - name: q
          in: query
          schema:
            type: string
          required: true
          description: Search term
          example: music festivals
        - name: category
          in: query
          schema:
            type: integer
          required: true
          description: Category ID (optional)
          example: 8
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/events/search?page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/events/search?page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/search?page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/search?page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: The `q` parameter is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: 'Category with ID {categoryId} not found'
  /events/search/past:
    get:
      tags:
        - events
      summary: Get past events whose titles, descriptions, locations, or tags match the provided search term
      operationId: getEventsSearchPast
      parameters:
        - name: q
          in: query
          schema:
            type: string
          required: true
          description: Search term
          example: music festivals
        - name: category
          in: query
          schema:
            type: integer
          required: true
          description: Category ID (optional)
          example: 8
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/events/search?page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/events/search?page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/search?page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/events/search?page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: The `q` parameter is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: 'Category with ID {categoryId} not found'
      security:
        - api_key: []
  /event-series/{eventSeriesId}:
    get:
      tags:
        - events
      summary: Get upcoming events in the specified series
      description: Returned events are ordered in descending chronological order (most recent to least recent)
      operationId: getEventSeries
      parameters:
        - name: eventSeriesId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          description: Event series ID
          example: 123
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/event-series/123?page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/event-series/123?page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/event-series/123?page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/event-series/123?page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: Event series ID is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: 'Series with ID {eventSeriesId} not found'
    delete:
      tags:
        - events
      summary: Deletes the specified event series
      description: Returned events are ordered in descending chronological order (most recent to least recent)
      operationId: deleteEventSeries
      parameters:
        - name: eventSeriesId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          description: Event series ID
          example: 123
        - name: userToken
          in: query
          schema:
            type: string
          required: true
          example: randomStringOf32Characters
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: "Event series ID is required / Series not found"
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: "User token missing / You don't have permission"
      security:
        - api_key: []
  /image:
    post:
      tags:
        - images
      summary: Upload an image
      description: Accepts images in JPEG, GIF, or PNG formats
      operationId: postImage
      parameters:
        - name: userToken
          in: query
          schema:
            type: string
          required: true
          example: randomStringOf32Characters
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                  file:
                    type: string
                    format: binary
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: images
                      id:
                        type: integer
                        format: int64
                        example: 123
                      attributes:
                        type: object
                        properties:
                          tiny_url:
                            type: string
                            example: "https://muncieevents.com/img/events/tiny/1636.jpg"
                          small_url:
                            type: string
                            example: "https://muncieevents.com/img/events/small/1636.jpg"
                          full_url:
                            type: string
                            example: "https://muncieevents.com/img/events/full/1636.jpg"
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: No image received. Did you forget to select a file to upload?
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: There was an error uploading your image
      security:
        - api_key: []
  /mailing-list/subscription:
    get:
      tags:
        - mailing list
      summary: Fetches the current user's subscription information, or returns NULL if the user is not subscribed
      operationId: getMailingListSubscription
      parameters:
        - name: userToken
          in: query
          schema:
            type: string
          required: true
          example: randomStringOf32Characters
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subscription'
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: "User token missing. You must be logged in to view subscription status."
        '405':
          description: Method not allowed
      security:
        - api_key: []
    put:
      tags:
        - mailing list
      summary: Updates the logged-in user's mailing list subscription
      operationId: putMailingListSubscription
      parameters:
        - name: userToken
          in: query
          schema:
            type: string
          required: true
          example: randomStringOf32Characters
        - in: header
          name: email
          schema:
            type: string
            example: user@example.com
          required: true
          description: "Subscriber's email address"
        - in: header
          name: all_categories
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if this user would like to receive emails about all current (or possible future) categories. `all_categories` must be provided and true if `category_ids` is not provided or is empty."
        - in: header
          name: category_ids
          schema:
            type: array
            example: [8, 9, 12]
          required: false
          description: "An array of category IDs. `category_ids` must be provided and non-empty if `all_categories` is not provided and TRUE."
        - in: header
          name: weekly
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive weekly emails about the upcoming week's events. Either `weekly`, `daily`, or at least one individual day must be provided and TRUE."
        - in: header
          name: daily
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive daily emails about that day's events. Either `weekly`, `daily`, or at least one individual day must be provided and TRUE."
        - in: header
          name: daily_sun
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Sunday about that day's events."
        - in: header
          name: daily_mon
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Monday about that day's events."
        - in: header
          name: daily_tue
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Tuesday about that day's events."
        - in: header
          name: daily_wed
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Wednesday about that day's events."
        - in: header
          name: daily_thu
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Thursday about that day's events."
        - in: header
          name: daily_fri
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Friday about that day's events."
        - in: header
          name: daily_sat
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Saturday about that day's events."
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: "Either weekly, daily, or at least one individual day must be selected"
        '405':
          description: Method not allowed
      security:
        - api_key: []
    delete:
      tags:
        - mailing list
      summary: Unsubscribes the logged-in user from the mailing list
      operationId: deleteMailingListSubscription
      parameters:
        - name: userToken
          in: query
          schema:
            type: string
          required: true
          example: randomStringOf32Characters
      responses:
        '204':
          description: Successful operation
        '405':
          description: Method not allowed
      security:
        - api_key: []
  /mailing-list/subscribe:
    post:
      tags:
        - mailing list
      summary: Subscribes the provided email address to the mailing list
      operationId: postMailingListSubscribe
      parameters:
        - name: userToken
          in: query
          schema:
            type: string
          required: false
          example: randomStringOf32Characters
          description: "If user is logged in, `userToken` can optionally be provided in the query string to help associate this subscription with their user account."
        - in: header
          name: email
          schema:
            type: string
            example: user@example.com
          required: true
          description: "Subscriber's email address"
        - in: header
          name: all_categories
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if this user would like to receive emails about all current (or possible future) categories. `all_categories` must be provided and true if `category_ids` is not provided or is empty."
        - in: header
          name: category_ids
          schema:
            type: array
            example: [8, 9, 12]
          required: false
          description: "An array of category IDs. `category_ids` must be provided and non-empty if `all_categories` is not provided and TRUE."
        - in: header
          name: weekly
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive weekly emails about the upcoming week's events. Either `weekly`, `daily`, or at least one individual day must be provided and TRUE."
        - in: header
          name: daily
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive daily emails about that day's events. Either `weekly`, `daily`, or at least one individual day must be provided and TRUE."
        - in: header
          name: daily_sun
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Sunday about that day's events."
        - in: header
          name: daily_mon
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Monday about that day's events."
        - in: header
          name: daily_tue
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Tuesday about that day's events."
        - in: header
          name: daily_wed
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Wednesday about that day's events."
        - in: header
          name: daily_thu
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Thursday about that day's events."
        - in: header
          name: daily_fri
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Friday about that day's events."
        - in: header
          name: daily_sat
          schema:
            type: boolean
            example: true
          required: false
          description: "TRUE if the user wants to receive an email every Saturday about that day's events."
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: "Either 'all categories' or at least one individual category must be selected."
        '403':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: This email address is already subscribed
        '405':
          description: Method not allowed
  /pages/about:
    get:
      tags:
        - pages
      summary: 'Get the HTML contents of the "About Muncie Events" page'
      operationId: getPagesAbout
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        description: Path to access this page
                        example: 'https://api.muncieevents.com/v1/pages/about'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /pages/rules-events:
    get:
      tags:
        - pages
      summary: 'Get the HTML contents of the "Rules for Posting Events" page'
      operationId: getPagesRulesEvents
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        description: Path to access this page
                        example: 'https://api.muncieevents.com/v1/pages/rules-events'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /pages/rules-images:
    get:
      tags:
        - pages
      summary: 'Get the HTML contents of the "Rules for Uploading Images" page'
      operationId: getPagesRulesImages
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        description: Path to access this page
                        example: 'https://api.muncieevents.com/v1/pages/rules-images'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /pages/rules-tags:
    get:
      tags:
        - pages
      summary: 'Get the HTML contents of the "Rules for Creating Tags" page'
      operationId: getPagesRulesTags
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        description: Path to access this page
                        example: 'https://api.muncieevents.com/v1/pages/rules-tags'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /pages/widgets:
    get:
      tags:
        - pages
      summary: 'Get the HTML contents of the "Calendar Widgets" page'
      operationId: getPagesWidgets
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        description: Path to access this page
                        example: 'https://api.muncieevents.com/v1/pages/widgets'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /tag/{tagId}:
    get:
      tags:
        - tags
      summary: Returns a tag and all upcoming associated events
      operationId: getTag
      parameters:
        - name: tagId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          example: 123
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tags
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: downtown
                            selectable:
                              type: boolean
                              example: true
                        relationships:
                          type: object
                          properties:
                            events:
                              type: object
                              properties:
                                data:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                        example: events
                                      id:
                                        type: integer
                                        example: 123
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: Required tag ID is missing
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: 'Invalid tag ID: {tagId}'
  /tags:
    get:
      tags:
        - tags
      summary: Returns an alphabetical array of all selectable tags
      operationId: getTags
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tags
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: art festivals
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /tags/autocomplete:
    get:
      tags:
        - tags
      summary: Returns a set of selectable tags that match the provided search term in rough order of relevance
      operationId: getTagsAutocomplete
      parameters:
        - name: term
          in: query
          schema:
            type: string
          description: 'A string to search for in tag names'
          required: true
          example: 'jazz'
        - name: limit
          in: query
          schema:
            type: integer
          description: 'An optional maximum number of tags to return (defaults to 10 if unspecified)'
          example: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tags
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: art festivals
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                        detail:
                          type: string
                          example: "Search term missing / Invalid limit"
  /tags/upcoming:
    get:
      tags:
        - tags
      summary: Returns a list of tags associated with upcoming events and the counts of upcoming events for each
      operationId: getTagsUpcoming
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tags
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: downtown
                            selectable:
                              type: boolean
                              example: true
                            upcomingEventCount:
                              type: integer
                              example: 10
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /tags/tree:
    get:
      tags:
        - tags
      summary: Returns the entire tree of visible tags
      description: "Note: Root tags are listed under `data`, and child tags are all listed in a flat array under
        `included`. A single, straightforward, multidimensional array of all tags and their descendant tags might be
        intuitive here, but the JSON API specification requires this cumbersome format instead. Sorry about that."
      operationId: getTagsTree
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tags
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: downtown
                            selectable:
                              type: boolean
                              example: true
                        relationships:
                          type: object
                          properties:
                            children:
                              type: object
                              properties:
                                data:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                        example: tags
                                      id:
                                        type: integer
                                        example: 123
                  included:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tags
                        id:
                          type: integer
                          example: 123
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: downtown
                            selectable:
                              type: boolean
                              example: true
                        relationships:
                          type: object
                          properties:
                            children:
                              type: object
                              properties:
                                data:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                        example: tags
                                      id:
                                        type: integer
                                        example: 123
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
  /user/{userId}:
    get:
      tags:
        - users
      summary: Returns the name and email address of a specified user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          example: 123
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 123
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: User Name
                          email:
                            type: string
                            example: 'user@example.com'
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: User not found
  /user/{userId}/events:
    get:
      tags:
        - events
      summary: Get all events posted by the specified user
      description: Returned events are ordered in descending chronological order (most recent to least recent)
      operationId: getUserEvents
      parameters:
        - name: userId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
          example: 123
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        description: Path to the first page in this result set
                        example: 'https://api.muncieevents.com/v1/user/123/events?page=1'
                      last:
                        type: string
                        description: Path to the last page in this result set
                        example: 'https://api.muncieevents.com/v1/user/123/events?page=4'
                      prev:
                        type: string
                        description: Path to the previous page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/user/123/events?page=1'
                        nullable: true
                      next:
                        type: string
                        description: Path to the next page in this result set, or null if not applicable
                        example: 'https://api.muncieevents.com/v1/user/123/events?page=3'
                        nullable: true
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: "Error: User not found"
  /user/forgot-password:
    post:
      tags:
        - users
      summary: "Accepts an email address and sends an email with a link to reset the user's password"
      operationId: postUserForgotPassword
      parameters:
        - in: header
          name: email
          schema:
            type: string
            example: 'user@example.com'
          required: true
          description: "User's email address"
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: Please provide an email address
        '404':
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 404
                        detail:
                          type: string
                          example: No account was found matching that email address
  /user/images:
    get:
      tags:
        - images
      summary: Returns an array of images associated with the user
      description: These images will be ordered from newest to oldest
      operationId: getUserImages
      parameters:
        - name: userToken
          in: query
          schema:
            type: string
          required: true
          example: randomStringOf32Characters
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: images
                        id:
                          type: integer
                          format: int64
                          example: 123
                        attributes:
                          type: object
                          properties:
                            tiny_url:
                              type: string
                              description: The URL of the tiny (50px square) thumbnail of the image
                              example: "https://muncieevents.com/img/events/tiny/123.jpg"
                            small_url:
                              type: string
                              description: The URL of the small (200px wide) thumbnail of the image
                              example: "https://muncieevents.com/img/events/small/123.jpg"
                            full_url:
                              type: string
                              description: The URL of the full-sized image
                              example: "https://muncieevents.com/img/events/full/123.jpg"
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
      security:
        - api_key: []
  /user/login:
    post:
      tags:
        - users
      summary: "Takes the user's email address and password and returns their access token and other account info"
      description: "This does not create a session, but returns a token to be included as the `userToken`
        query string parameter in other requests that require it"
      operationId: postUserLogin
      parameters:
        - in: header
          name: email
          schema:
            type: string
            example: 'user@example.com'
          required: true
          description: "User's email address"
        - in: header
          name: password
          schema:
            type: string
            example: passwordexample
          required: true
          description: "User's password"
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 123
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: User Name
                          email:
                            type: string
                            example: 'user@example.com'
                          token:
                            type: string
                            example: randomStringOf32Characters
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: The `email`/`password` parameter is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: Email or password is incorrect
  /user/password:
    patch:
      tags:
        - users
      summary: "Used for updating a user's password"
      operationId: patchUserPassword
      parameters:
        - name: userToken
          in: query
          description: User token
          schema:
            type: string
            example: randomStringOf32Characters
          required: true
        - in: header
          name: password
          schema:
            type: string
            example: newPassword123
          required: true
          description: "New password"
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: No password provided
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: "There was an error updating your password. Details: ..."
      security:
        - api_key: []
  /user/profile:
    patch:
      tags:
        - users
      summary: "Used for updating a user's name and/or email address"
      description: "It is not necessary to provide both the `name` and `email` parameters, but at least one must be present"
      operationId: patchUserProfile
      parameters:
        - name: userToken
          in: query
          description: User token
          schema:
            type: string
            example: randomStringOf32Characters
          required: true
        - in: header
          name: name
          schema:
            type: string
            example: Updated User Name
          required: true
          description: "User's name"
        - in: header
          name: email
          schema:
            type: string
            example: 'user@example.com'
          required: true
          description: "User's email address"
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenInvalid.yaml'
                  - $ref: './docs/v1/errors/ErrorUserTokenMissing.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: Either `name` or `email` parameters must be provided
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: "There was an error updating your profile. Details: ..."
      security:
        - api_key: []
  /user/register:
    post:
      tags:
        - users
      summary: Adds a user account
      operationId: postUserRegister
      parameters:
        - in: header
          name: name
          schema:
            type: string
            example: User Name
          required: true
          description: "User's name"
        - in: header
          name: email
          schema:
            type: string
            example: user@example.com
          required: true
          description: "User's email address"
        - in: header
          name: password
          schema:
            type: string
            example: passwordexample
          required: true
          description: "User's password"
        - in: header
          name: join_mailing_list
          schema:
            type: boolean
            example: true
          required: false
          description: "If TRUE, the user will be subscribed to the mailing list using the default options (weekly emails for all event categories)"
      responses:
        '200':
          description: Successful operation
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 123
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: User Name
                          email:
                            type: string
                            example: user@example.com
                          token:
                            type: string
                            example: randomStringOf32Characters
        '400':
          description: Bad request
          content:
            application/vnd.api+json:
              schema:
                oneOf:
                  - $ref: './docs/v1/errors/ErrorInvalidProtocol.yaml'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: The `name`/`email`/`password` parameter is required
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              type: integer
                              example: 400
                            detail:
                              type: string
                              example: This email address is already registered
components:
  schemas:
    Category:
      $ref: './docs/v1/attributes/CategoryAttributes.yaml'
    User:
      $ref: './docs/v1/attributes/UserAttributes.yaml'
    Tag:
      $ref: './docs/v1/attributes/TagAttributes.yaml'
    Event:
      type: object
      properties:
        type:
          type: string
          example: events
        id:
          type: integer
          format: int64
          example: 123
        attributes:
          $ref: './docs/v1/attributes/EventAttributes.yaml'
        relationships:
          $ref: './docs/v1/relationships/EventRelationships.yaml'
    EventSeries:
      $ref: './docs/v1/attributes/EventSeriesAttributes.yaml'
    Image:
      $ref: './docs/v1/attributes/ImageAttributes.yaml'
    Page:
      type: object
      properties:
        type:
          type: string
          example: pages
        id:
          type: string
          example: about
        attributes:
          $ref: './docs/v1/attributes/PageAttributes.yaml'
    Subscription:
      type: object
      properties:
        type:
          type: string
          example: subscriptions
        id:
          type: integer
          example: 123
        attributes:
          $ref: './docs/v1/attributes/SubscriptionAttributes.yaml'
        relationships:
          $ref: './docs/v1/relationships/SubscriptionRelationships.yaml'
  securitySchemes:
    api_key:
      type: apiKey
      name: apiKey
      in: query
